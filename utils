import { request, APIRequestContext } from "@playwright/test";
import { endpoints, baseURL_C2 } from "../config/endpoints";

export class C2Services {
  private accessToken = "";
  private apiContext!: APIRequestContext;

  constructor(username: string, password: string) {
    this.initialize(username, password);
  }

  private async initialize(username: string, password: string) {
    await this.login(username, password);
    this.apiContext = await this.createApiContext();
  }

  private async createApiContext(headers: Record<string, string> = {}): Promise<APIRequestContext> {
    return request.newContext({
      ignoreHTTPSErrors: true,
      extraHTTPHeaders: {
        Cookie: this.accessToken,
        "Content-Type": "application/json",
        ...headers,
      },
    });
  }

  private async login(username: string, password: string) {
    const response = await request.newContext().post(`${baseURL_C2}${endpoints.login}`, {
      form: { username, password },
    });

    if (!response.ok()) {
      throw new Error(`Login failed: ${response.status()}`);
    }

    const { access_token } = await response.json();
    console.log("Login successful");
    this.accessToken = access_token;
  }

  private async requestAPI<T>(method: string, endpoint: string, data?: object): Promise<T | null> {
    const response = await this.apiContext.fetch(`${baseURL_C2}${endpoint}`, {
      method,
      body: data ? JSON.stringify(data) : undefined,
    });

    if (!response.ok()) {
      console.error(`API Error: ${method} ${endpoint} - ${response.status()}`);
      return null;
    }

    return response.json();
  }

  async createEvent(eventData: object) {
    return this.requestAPI("POST", endpoints.createEvent, eventData);
  }

  async fetchEventTaskType() {
    return this.requestAPI("GET", endpoints.eventTaskType);
  }
}
