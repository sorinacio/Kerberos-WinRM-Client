export class GpsConverter {
  public static decimalGpsToDms({ latitude, longitude }: { latitude: number; longitude: number }): string {
    function toDms(value: number, isLat: boolean): string {
      const abs = Math.abs(value);
      let totalSeconds = abs * 3600;
      totalSeconds = Math.round(totalSeconds * 100) / 100;
      const degrees = Math.floor(totalSeconds / 3600);
      let remainder = totalSeconds - degrees * 3600;
      const minutes = Math.floor(remainder / 60);
      remainder -= minutes * 60;
      let seconds = Math.round(remainder * 100) / 100;
      if (seconds === 60) {
        seconds = 0;
      }
      const direction = isLat ? (value >= 0 ? 'N' : 'S') : (value >= 0 ? 'E' : 'W');
      return `${degrees}째 ${minutes}' ${seconds.toFixed(2)}" ${direction}`;
    }
    return `${toDms(latitude, true)} ${toDms(longitude, false)}`;
  }
}



  public dmsToDecimalGps(dms: string): { latitude: number; longitude: number } {
    // Split into latitude and longitude parts
    const [latStr, lonStr] = dms.split(/(?<=N)\s+/); // Split after "N" followed by whitespace

    // Helper function to parse DMS string to decimal
    const parseDms = (dmsPart: string): number => {
      // Extract degrees, minutes, seconds, and direction using regex
      const match = dmsPart.match(/(\d+)째\s*(\d+)?'?\s*(\d+\.?\d*)?"?\s*([NSEW])/);
      if (!match) throw new Error(`Invalid DMS format: ${dmsPart}`);

      const [, degStr, minStr = '0', secStr = '0', dir] = match;
      const degrees = parseInt(degStr);
      const minutes = parseInt(minStr);
      const seconds = parseFloat(secStr);

      // Convert to decimal degrees
      let decimal = degrees + (minutes / 60) + (seconds / 3600);

      // Apply sign based on direction
      if (dir === 'S' || dir === 'W') decimal = -decimal;

      return decimal;
    };

    const latitude = parseDms(latStr);
    const longitude = parseDms(lonStr);

    return { latitude, longitude };
  }





  public static decimalGpsToDms({ latitude, longitude }: { latitude: number; longitude: number }): {
    trunc: string;
    round: string;
    floor: string;
    ceil: string;
  } {
    const toDms = (val: number, dir: string) => {
      const deg = Math.floor(val);
      const remainder = val - deg;
      const min = Math.floor(remainder * 60);
      const secFloat = (remainder * 60 - min) * 60;

      // Calculate seconds with different rounding methods (to 2 decimal places)
      const secTrunc = Math.trunc(secFloat * 100) / 100; // Truncate
      const secRound = Math.round(secFloat * 100) / 100; // Round to nearest
      const secFloor = Math.floor(secFloat * 100) / 100; // Floor
      const secCeil = Math.ceil(secFloat * 100) / 100;   // Ceiling

      // Format helper
      const formatDms = (sec: number) => {
        const degStr = deg.toString().padStart(2, '0');
        const minStr = min.toString().padStart(2, '0');
        const [secInt, secDec = ''] = sec.toString().split('.');
        const secPaddedInt = secInt.padStart(2, '0');
        const secPaddedDec = secDec.padEnd(2, '0');
        return `${degStr}째 ${minStr}' ${secPaddedInt}.${secPaddedDec}" ${dir}`;
      };

      return {
        trunc: formatDms(secTrunc),
        round: formatDms(secRound),
        floor: formatDms(secFloor),
        ceil: formatDms(secCeil),
      };
    };

    const latDms = toDms(latitude, 'N');
    const lonDms = toDms(longitude, 'E');

    return {
      trunc: `${latDms.trunc} ${lonDms.trunc}`,
      round: `${latDms.round} ${lonDms.round}`,
      floor: `${latDms.floor} ${lonDms.floor}`,
      ceil: `${latDms.ceil} ${lonDms.ceil}`,
    };
  }


 public static decimalGpsToDms({ latitude, longitude }: { latitude: number; longitude: number }): string {
    const toDms = (val: number, dir: string) => {
      const deg = Math.floor(val);
      const remainder = val - deg;
      const min = Math.floor(remainder * 60);
      const secFloat = (remainder * 60 - min) * 60;
      const ceilSec = Math.ceil(secFloat * 100) / 100; // Ceiling to 2 decimal places

      const degStr = deg.toString().padStart(2, '0');
      const minStr = min.toString().padStart(2, '0');
      const [secInt, secDec = ''] = ceilSec.toString().split('.');
      const secPaddedInt = secInt.padStart(2, '0');
      const secPaddedDec = secDec.padEnd(2, '0');
      return `${degStr}째 ${minStr}' ${secPaddedInt}.${secPaddedDec}" ${dir}`;
    };
    return `${toDms(latitude, 'N')} ${toDms(longitude, 'E')}`;
  }
