import { request, APIRequestContext } from "@playwright/test";
import { endpoints, baseURL_C2 } from "../config/endpoints";

export class C2Services {
  private accessToken: string = "";
  private apiContext: APIRequestContext | null = null;
  private loginPromise: Promise<void>;

  constructor(username: string, password: string) {
    this.loginPromise = this.login(username, password);
  }

  private async login(username: string, password: string): Promise<void> {
    const response = await this.requestAPI("POST", endpoints.login, new URLSearchParams({ username, password }), true);
    if (!response) {
      throw new Error("Failed to login");
    }
    console.log("Login successful", response);
    this.accessToken = response.access_token;
    this.apiContext = null;
  }

  private async requestAPI<T>(method: string, endpoint: string, data?: object | URLSearchParams, isLogin: boolean = false): Promise<T | null> {
    await this.loginPromise;
    
    let headers: Record<string, string> = {
      "Content-Type": isLogin ? "application/x-www-form-urlencoded" : "application/json",
    };
    
    if (!isLogin && this.accessToken) {
      headers["Authorization"] = `Bearer ${this.accessToken}`;
    }
    
    if (!this.apiContext) {
      this.apiContext = await request.newContext({
        ignoreHTTPSErrors: true,
        extraHTTPHeaders: headers,
      });
    }

    const options: any = { method };
    if (data) {
      options.body = isLogin ? data.toString() : JSON.stringify(data);
    }

    const response = await this.apiContext.fetch(`${baseURL_C2}${endpoint}`, options);
    
    if (!response.ok()) {
      console.error(`API Request Failed: ${method} ${endpoint} - Status: ${response.status()}`);
      console.error(`Response: ${await response.text()}`);
      return null;
    }

    return await response.json();
  }

  async checkConnectionStatus() {
    return await this.requestAPI("GET", endpoints.connectionStatus);
  }

  async getZones() {
    return await this.requestAPI("GET", endpoints.zones);
  }

  async fetchEventTaskType() {
    return await this.requestAPI("GET", endpoints.eventTaskType);
  }
}
